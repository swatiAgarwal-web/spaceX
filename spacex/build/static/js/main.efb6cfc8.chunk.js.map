{"version":3,"sources":["component/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Home","useState","data","setData","launchYear","setLaunchYear","successLaunch","setSuccessLaunch","successLand","setSuccessLand","isDataLoaded","setIsDataLoaded","useEffect","params","limit","urlParams","launch_year","launch_success","land_success","axios","get","then","res","window","history","pushState","handleClickLaunchYear","event","selectedLaunchYear","parseInt","target","innerText","handleClickLaunchSuccess","selectedLaunchSuccess","handleClickLandSuccess","selectedLandSuccess","displayYears","entries","i","v","launchYearClass","push","className","id","onClick","displayLaunchStatus","successClass","displayLandStatus","cardsData","map","value","index","launchStatusValue","toString","landSuccess","rocket","first_stage","cores","alt","mission_name","src","links","mission_patch_small","flight_number","mission_id","join","bodyData","length","style","padding","margin","paddingBottom","fontSize","role","aria-label","Fragment","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","hydrate","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.efb6cfc8.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport \"./Home.css\";\n\n\nconst Home = () => {\n\t// holds the response data from API\n\tconst [data, setData] = useState([]);\n\t// selected \"Launch Year\" from Filter\n\tconst [launchYear, setLaunchYear] = useState(\"\");\n\t// selected \"Success Launch\" from Filter\n\tconst [successLaunch, setSuccessLaunch] = useState(\"\");\n\t// selected \"Success Landing\" from Filter\n\tconst [successLand, setSuccessLand] = useState(\"\");\n\t// A flag/check to process the data to display/execute set of code snippet\n\tconst [isDataLoaded, setIsDataLoaded] = useState(false);\n\t\n\tuseEffect (() =>{\n\t\t/*\n\t\t * When the isDataLoaded is set false, make API request and set isDataLoaded to true\n\t\t * Preparing params payload based on filters selection for the API request \n\t\t * preparing URL params to be set based on filter selection\n\t\t */\n\t\tif(!isDataLoaded) {\n\t\tlet params = {limit : 100};\n\t\tlet urlParams = \"\";\n\t\t\n\t\tif(launchYear) {\n\t\t\tparams.launch_year = launchYear;\n\t\t\turlParams += (urlParams) ? \"&launch_year=\"+launchYear : \"?launch_year=\"+launchYear;\n\t\t}\n\t\t\n\t\tif(successLaunch) {\n\t\t\tparams.launch_success = successLaunch;\n\t\t\turlParams += (urlParams) ? \"&launch_success=\"+successLaunch : \"?launch_success=\"+successLaunch;\n\t\t}\n\t\t\n\t\tif(successLand) {\n\t\t\tparams.land_success = successLand;\n\t\t\turlParams += (urlParams) ? \"&land_success=\"+successLand : \"?land_success=\"+successLand;\n\t\t}\n\t\t\n\t\taxios.get(\"https://api.spacexdata.com/v3/launches\", {\n\t\t\tparams : params\n\t\t}).then ((res)=>{\n\t\t\tlet data = res.data;\n\t\t\tsetData(data);\n\t\t\tsetIsDataLoaded(true);\n\t\t\t// change URL based on filtered data\t\t\t\n\t\t\twindow.history.pushState(null, \"\", \"/\"+urlParams);\t\t\t\t\t\t\n\t\t})\n\t\t}\n\t},[isDataLoaded,launchYear,successLaunch,successLand]);\n\t\n\t/*\n\t * An event when \"Launch Year\" is filtered\n\t * To toggle selection/deselection, setting state value \n\t */\n\tconst handleClickLaunchYear =(event) =>{\n\t\tlet selectedLaunchYear = parseInt(event.target.innerText);\n\t\tif(selectedLaunchYear === launchYear) {\n\t\t\tselectedLaunchYear = \"\";\n\t\t}\n\t\tsetLaunchYear(selectedLaunchYear);\n\t\tsetIsDataLoaded(false);\n\t}\n\n\t/*\n\t * An event when \"Successful Launch\" is filtered\n\t * To toggle selection/deselection, setting state value \n\t */\n\tconst handleClickLaunchSuccess =(event) =>{\n\t\tlet selectedLaunchSuccess = event.target.innerText;\n\t\tif(selectedLaunchSuccess === successLaunch) {\n\t\t\tselectedLaunchSuccess = \"\";\n\t\t}\n\t\tsetSuccessLaunch(selectedLaunchSuccess);\n\t\tsetIsDataLoaded(false);\n\t}\n\t\n\t/*\n\t * An event when \"Successful Landing\" is filtered\n\t * To toggle selection/deselection, setting state value \n\t */\t\n\tconst handleClickLandSuccess =(event) =>{\n\t\tlet selectedLandSuccess = event.target.innerText;\n\t\tif(selectedLandSuccess === successLand) {\n\t\t\tselectedLandSuccess = \"\";\n\t\t}\n\t\tsetSuccessLand(selectedLandSuccess);\n\t\tsetIsDataLoaded(false);\n\t}\n\n// Array for \"Launch Year\" filter\nlet years = [2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020];\nlet displayYears = [];\nfor(const [i, v] of years.entries()){\n\tlet launchYearClass = \"lightGreen\";\n\n\tif(v === parseInt(launchYear)) {\n\t\tlaunchYearClass = \"darkGreen\";\n\t}\n\tdisplayYears.push(\n\t\t<button className={`filterOption ${launchYearClass}`} id={`year${i}`} key={`keyYear${i}`} onClick={handleClickLaunchYear}>\n\t\t\t{v}\n\t\t</button>\n\t)\n};\n\n// Successful Launch filter \nlet launchStatus = [\"true\", \"false\"];\nlet displayLaunchStatus = [];\nfor(const [i, v] of launchStatus.entries()){\n\tlet successClass = \"lightGreen\";\n\n\tif(v === successLaunch) {\n\t\tsuccessClass = \"darkGreen\";\n\t}\n\tdisplayLaunchStatus.push(\n\t\t<button className={`filterOption ${successClass}`} id={`launch${i}`} key={`keySuccess${i}`} onClick={handleClickLaunchSuccess}>\n\t\t\t{v}\n\t\t</button>\n\t)\n};\n\t\n// Successful Landing filter\t\nlet landStatus = [\"true\", \"false\"];\nlet displayLandStatus = [];\nfor(const [i, v] of landStatus.entries()){\n\tlet successClass = \"lightGreen\";\n\n\tif(v === successLand) {\n\t\tsuccessClass = \"darkGreen\";\n\t}\n\tdisplayLandStatus.push(\n\t\t<button className={`filterOption ${successClass}`} id={`land${i}`} key={`keyLand${i}`}onClick={handleClickLandSuccess}>\n\t\t\t{v}\n\t\t</button>\n\t)\n};\n\n// preparing view data from response state data\t\nlet cardsData = data.map((value, index) => {\n\t\tlet launchStatusValue = \"\";\n\t\tif(value.launch_success !== null){\n\t\t\tlaunchStatusValue = value.launch_success.toString();\n\t\t};\n\t\t\n\t\tlet landSuccess = \"\";\n\t\tif(value.rocket.first_stage.cores[0].land_success !== null) {\n\t\t\tlandSuccess = value.rocket.first_stage.cores[0].land_success.toString();\n\t\t}\n\n\t\treturn (<div className=\"card\" key={value.flight_number}>\n\t\t\t<img alt={value.mission_name} src={value.links.mission_patch_small}/>\n\t\t\t<p>{value.mission_name} #{value.flight_number}</p>\n\t\t\t<p><strong>Mission Ids : </strong>{value.mission_id.join(\", \")}</p>\n\t\t\t<p><strong>Launch year : </strong>{value.launch_year}</p>\n\t\t\t<p><strong>Successful launch : </strong>{launchStatusValue}</p>\n\t\t\t<p><strong>Successful landing : </strong>{landSuccess}</p>\n\t\t</div>)\n});\n\n// If Launch Programs data available, display else display message with image\t\t\nlet bodyData = cardsData.length !== 0 ? (\n\t<main className=\"content column\">\n\t\t{cardsData}\n\t</main>\n\t) : (\n<div style={{ padding: \"20px\", margin: \"0 auto\"}}>\n\t<p style={{ paddingBottom: \"0px\", margin: \"60px 0 30px 0 \" }}>\n\t\t<span style={{ fontSize: \"100px\" }} role=\"img\" aria-label=\"No Data\" alt=\"Invalid input\">\n\t\t\t\t&#128543;\n\t\t</span>\n\t</p>\n\t<p style={{ padding: \"0px 0px 10px 0px \", margin: \"0px 0px 0px 0px\" }}>\n\t\tThere is no data available for selected filter/s. <br/>\n\t\tPlease try again with new selections!!!\n\t</p>\n</div>\n);\n\n/* \n * if data flag is true, display left panel (Filter options) and right panel \n   (launch programs view) othewise display a loader\n */\n\nreturn isDataLoaded ? (\n\t<React.Fragment>\n\t<div className=\"container\">\n\t\t<header className=\"header column\">\n\t\t\tSpaceX Launch Programs\n\t\t</header>\n\t\t<aside className=\"sidebar column\">\n\t\t\t<div className=\"filterWrapper\">\n\t\t\t\t<div className=\"heading\">Filters</div>\n\t\t\t\t<div className=\"filterTitle\">Launch Year</div>\n\t\t\t\t{displayYears}\n\t\t\t\t\n\t\t\t\t<div className=\"filterTitle\">Successful Launch</div>\n\t\t\t\t{displayLaunchStatus}\n\t\t\t\t\n\t\t\t\t<div className=\"filterTitle\">Successful Landing</div>\n\t\t\t\t{displayLandStatus}\n\t\t\t</div>\n\t\t</aside>\n\t\t{bodyData}\n\t\t<footer className=\"footer\">Developed By : Swati Agarwal</footer>\n\t</div>\n\t</React.Fragment>\n\t\n) : (\n<div>loading...</div>\n)\n\n\t\n}\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\nimport Home from \"./component/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n//indicate to the DOM renderer that we're rehydrating the app after a server-side render\nReactDOM.hydrate(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}